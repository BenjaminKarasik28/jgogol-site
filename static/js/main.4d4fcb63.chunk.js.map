{"version":3,"sources":["images/jg1.jpg","images/jg2.jpg","images/jg3.jpg","images/jg4.jpg","logo.svg","serviceWorker.js","components/Header.js","components/Nav.js","images.js","components/CarouselComponent.js","components/MainPage.js","components/Collection.js","components/MiddleRoute.js","JGogolRouter.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","Nav","props","horizontal","to","pathname","state","option","jg1","jg2","jg3","jg4","CarouselComponent","console","log","this","Carousel","images","map","image","Item","key","uuid","src","alt","Caption","React","PureComponent","MainPage","setState","length","Component","Collection","route","MiddleRoute","JGogolRouter","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,mHCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCESC,EAlBA,WACX,OAEI,yBAAKC,UAAY,cAET,yBAAKA,UAAY,aACb,wBAAIA,UAAY,cAAhB,gBACA,wBAAIA,UAAY,QAAhB,iBACA,wBAAIA,UAAY,cAAhB,qBAIJ,wBAAIA,UAAY,cAAhB,gC,+CCGDC,EAbH,SAAAC,GACR,OACI,yBAAKF,UAAY,WACb,kBAAC,MAAD,CAAKG,WAAW,gBACZ,kBAAC,IAAD,CAAMH,UAAY,OAAOI,GAAI,CAAEC,SAAU,UAAWC,MAAO,CAAEC,OAAQ,QAArE,iBACA,kBAAC,IAAD,CAAMP,UAAY,OAAOI,GAAI,CAAEC,SAAU,UAAWC,MAAO,CAAEC,OAAQ,SAArE,eACA,kBAAC,IAAD,CAAMP,UAAY,OAAQI,GAAI,CAAEC,SAAU,UAAWC,MAAO,CAAEC,OAAQ,SAAtE,aACA,kBAAC,IAAD,CAAMP,UAAY,OAAOI,GAAI,CAAEC,SAAU,UAAWC,MAAO,CAAEC,OAAQ,QAArE,wB,oECND,GACXC,IAAMC,IAAKC,IAAKC,K,yRCuCLC,E,4UAlCP,OAJAC,QAAQC,IAAIC,KAAKb,OAKb,6BAEI,kBAACc,EAAA,EAAD,KACKD,KAAKb,MAAMe,OAAOC,KAAI,SAACC,GACpB,OAEQ,kBAACH,EAAA,EAASI,KAAV,CAAeC,IAAOC,OAClB,yBACItB,UAAU,gBACVuB,IAAOJ,EAAME,IACbG,IAAM,aAET,kBAACR,EAAA,EAASS,QAAV,KACG,8CACA,+D,GArBRC,IAAMC,e,gQCuBvBC,E,iXArBXtB,MAAQ,CACJW,OAAQ,I,kEAGRF,KAAKc,UAAS,iBAAK,CAACZ,OAAQA,EAAOC,KAAI,SAACC,GACpC,OAAO,yBAAKI,IAAMJ,EAAOK,IAAM,cAAcH,IAAMF,a,+BAIvD,OACI,6BAEI,kBAAC,EAAD,MACCJ,KAAKT,MAAMW,OAAOa,OAAS,GAAK,kBAAC,EAAD,CAAmBb,OAAUF,KAAKT,MAAMW,c,GAdlES,IAAMK,W,gQCJRC,E,4UAEb,OACI,6BACKjB,KAAKb,MAAM+B,W,GAJaP,IAAMK,WCgBhCG,EAfI,SAAChC,GAIZ,OAFAW,QAAQC,IAAIZ,EAAMN,SAASU,MAAMC,QAG7B,kDCWG4B,EAXM,kBACjB,8BACI,kBAAC,EAAD,MACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAaV,IACrC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAO,UAAUC,UAAaJ,IAC3C,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAO,cAAcC,UAAaN,O,MCL/DO,IAASC,OAAO,kBAAC,IAAD,KAAe,kBAAC,EAAD,OAAiCC,SAASC,eAAe,ST0HlF,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.4d4fcb63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jg1.ba062b30.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jg2.a1507589.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jg3.74528fe8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jg4.317381ce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Header = () => {\n    return (\n        \n        <div className = \"headerFont\">\n           \n                <div className = \"container\">\n                    <h4 className = \"headerText\">913.634.3787</h4>\n                    <h1 className = \"name\" >Juliana Gogol</h1>\n                    <h4 className = \"headerText\">jgogol@pratt.edu</h4> \n                </div>\n                   \n            \n                <h4 className = \"centerText\">Fashion and Textile Design</h4>\n                \n        </div>\n      \n    )\n}\nexport default Header;","import  React from 'react'\nimport {Link} from 'react-router-dom'\nimport { Column, Row } from \"simple-flexbox\";\n\nconst Nav = props => {\n    return (\n        <div className = \"nav-bar\">\n            <Row horizontal='space-evenly'>\n                <Link className = 'link' to={{ pathname: '/middle', state: { option: 'ST'} }} >Senior Thesis</Link>\n                <Link className = 'link' to={{ pathname: '/middle', state: { option: 'S19'} }} >Spring 2019</Link>\n                <Link className = 'link'  to={{ pathname: '/middle', state: { option: 'F18'} }} >Fall 2018</Link>\n                <Link className = 'link' to={{ pathname: '/middle', state: { option: 'SP'} }} >Special Projects </Link>\n            </Row>\n        </div>\n    )\n}\n\nexport default Nav;\n","import jg1 from './images/jg1.jpg'\nimport jg2 from './images/jg2.jpg'\nimport jg3 from './images/jg3.jpg'\nimport jg4 from './images/jg4.jpg'\n\nexport default [\n    jg1 , jg2, jg3, jg4\n]","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Carousel from 'react-bootstrap/Carousel'\nimport uuid from 'react-uuid'\n\nclass CarouselComponent extends React.PureComponent {\n    render(){\n        console.log(this.props) \n\n        //TODO get s desciption and titleof each image and place in array \n\n        return (\n            <div>\n                \n                <Carousel >\n                    {this.props.images.map((image)=>{\n                        return (    \n                            \n                                <Carousel.Item key = {uuid()}>\n                                    <img \n                                        className=\"d-block w-100\"\n                                        src = {image.key}\n                                        alt = \"not here\" \n                                    />\n                                     <Carousel.Caption>\n                                        <h3>Title of Piece</h3>\n                                        <p>Description of Piece.</p>\n                                    </Carousel.Caption>\n                                </Carousel.Item>\n                               \n                           \n                        )\n\n                    })}\n                </Carousel>\n            </div>\n        )\n    }\n   \n}\n\nCarouselComponent.propTypes = {\n\n}\n\nexport default CarouselComponent\n","import React from 'react'\nimport Nav from './Nav'\nimport images from '../images'\nimport CarouselComponent from './CarouselComponent'\n\n\nclass MainPage extends React.Component  {\n    state = {\n        images: []\n    }\n    componentDidMount(){\n        this.setState(()=>({images: images.map((image)=>{\n            return <img src ={image} alt = \"not working\" key ={image}></img>\n        })}))\n    }\n    render(){\n        return (\n            <div>\n                \n                <Nav/>\n                {this.state.images.length > 0 && <CarouselComponent images = {this.state.images}/>}\n                \n            </div>\n        )\n    }\n    \n}\n\nexport default MainPage\n","import React from 'react'\n\nexport default class Collection  extends React.Component{\n    render(){\n        return (\n            <div>\n                {this.props.route}\n            </div>\n        )\n    }\n    \n}\n\n","import React from 'react'\nimport Collection from './Collection'\n\nconst MiddleRoute =(props)=> {\n    \n        console.log(props.location.state.option)\n\n        return (\n            <div>\n                Work in Progress\n            </div>\n        )\n    }\n    \n    \n\n\n\nexport default MiddleRoute\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport App from './App';\nimport Header  from './components/Header'\nimport MainPage from './components/MainPage'\nimport Collection from './components/Collection'\nimport MiddleRoute from './components/MiddleRoute'\n\nconst JGogolRouter = () => (\n    <main>\n        <Header/>\n            <Switch>\n                <Route exact path = '/' component = {MainPage} />\n                <Route exact path = '/middle' component = {MiddleRoute} />\n                <Route exact path = '/collection' component = {Collection} />\n            </Switch>\n    </main>\n)\n\nexport default JGogolRouter;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nimport JGogolRouter from './JGogolRouter';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<BrowserRouter><JGogolRouter/></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}